# -*- coding: utf-8 -*-
"""Network.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZolA0bzhKXVmXGMzwobs5CWMn2g_h4wz
"""

import torch.nn as nn
from torch.nn.modules.conv import Conv2d

class sample_CNN(nn.Module):
    def __init__(self, num_of_class):
        super(sample_CNN, self).__init__()

        self.conv_layers = nn.Sequential(
            nn.Conv2d(1, 10, kernel_size=5),
            nn.MaxPool2d(2),
            nn.ReLU(),
            nn.Conv2d(10, 20, kernel_size=5),
            nn.Dropout(),
            nn.MaxPool2d(2),
            nn.ReLU(),
        )
        self.fc_layers = nn.Sequential(
            nn.Linear(320, 50),
            nn.ReLU(),
            nn.Dropout(),
            nn.Linear(50, num_of_class),
            nn.Softmax(dim=1)
        )

    def forward(self, x):
        x = self.conv_layers(x)
        x = x.view(-1, 320)
        x = self.fc_layers(x)
        return x

class original_CNN(nn.Module):
    def __init__(self, num_of_class):
        super(original_CNN, self).__init__()
        
        self.conv_layer1 = nn.Sequential(
            nn.Conv2d(1, 8, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.Conv2d(8, 8, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.Conv2d(8, 8, kernel_size=3, padding=1),
            nn.Dropout2d(0.5),
            nn.MaxPool2d(2, 1),
            nn.ReLU(),
        )

        self.conv_layer2 = nn.Sequential(
            nn.Conv2d(8, 16, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.Conv2d(16, 16, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.Conv2d(16, 16, kernel_size=3, padding=1),
            nn.Dropout2d(0.5),
            nn.MaxPool2d(2, 1),
            nn.ReLU(),
        )

        self.conv_layer3 = nn.Sequential(
            nn.Conv2d(16, 32, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.Conv2d(32, 32, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.Conv2d(32, 32, kernel_size=3, padding=1),
            nn.Dropout2d(0.5),
            nn.MaxPool2d(2, 1),
            nn.ReLU(),
        )

        self.conv_layer4 = nn.Sequential(
            nn.Conv2d(32, 64, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.Conv2d(64, 64, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.Conv2d(64, 64, kernel_size=3, padding=1),
            nn.Dropout2d(0.5),
            nn.MaxPool2d(2, 1),
            nn.ReLU(),
        )

        self.conv_layer5 = nn.Sequential(
            nn.Conv2d(64, 128, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.Conv2d(128, 128, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.Conv2d(128, 128, kernel_size=3, padding=1),
            nn.Dropout2d(0.5),
            nn.MaxPool2d(2, 1),
            nn.ReLU(),
        )

        self.fc_layers = nn.Sequential(
                nn.Linear(128*23*23, 1024),
                nn.ReLU(),
                nn.Dropout(0.25),
                nn.Linear(1024, 128),
                nn.ReLU(),
                nn.Dropout(0.25),
                nn.Linear(128, num_of_class),
                nn.Softmax(dim=1)
            )
        
        def forward(self, x):
            x = self.conv_layer1(x)
            x = self.conv_layer2(x)
            x = self.conv_layer3(x)
            x = self.conv_layer4(x)
            x = self.conv_layer5(x)
            x = x.view(-1, 128*23*23)
            x = self.fc_layers(x)
            return x

if __name__ == '__main__':
    import Choice_Model
    target_class = [0, 1]
    model_name = 'sample_CNN'
    model = Choice_Model(model_name, target_class)
    print(model)

